services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  api_prod:
    build:
      context: .
      dockerfile: Dockerfile-prod
    container_name: api_prod
    restart: always
    profiles:
      - manual_only  # just so we don't accidentally start when calling docker compose up
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ENVIRONMENT=production
    networks:
      - app_network

  api_dev:
    build:
      context: .
      dockerfile: Dockerfile-dev
    container_name: api_dev
    volumes:
      - ./app:/waste-api/app
      - ./alembic:/waste-api/alembic
      - ./alembic.ini:/waste-api/alembic.ini
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - ENVIRONMENT=development
      - PYTHONPATH=/waste-api
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - app_network

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api_dev
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge
